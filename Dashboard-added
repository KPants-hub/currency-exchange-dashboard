import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import pandas as pd
import plotly.express as px

# Load Data
latest_rates = pd.read_csv('latest_rates_df.csv')  # Contains current exchange rates
historical_rates = pd.read_csv('historical_exchange_data.csv')  # Contains historical rates

# Initialize Dash app
app = dash.Dash(__name__)

# App Layout
app.layout = html.Div([
    html.H1("Exchange Rates Dashboard", style={'text-align': 'center'}),

    # Dropdowns for Base and Target Currencies
    html.Div([
        html.Label("Select Base Currency:"),
        dcc.Dropdown(
            id='base-currency',
            options=[
                {'label': 'USD', 'value': 'USD'},
                {'label': 'INR', 'value': 'INR'},
                {'label': 'EUR', 'value': 'EUR'}
            ],
            value='USD'  # Default value
        ),
        html.Label("Select Target Currency:"),
        dcc.Dropdown(
            id='target-currency',
            options=[
                {'label': 'USD', 'value': 'USD'},
                {'label': 'INR', 'value': 'INR'},
                {'label': 'EUR', 'value': 'EUR'}
            ],
            value='INR'  # Default value
        ),
    ]),

    # Conversion and Graph Section
    html.Div([
        html.H3(id='conversion-result'),
        dcc.Graph(id='exchange-graph')
    ])
])

# Callback for Interactivity
@app.callback(
    [Output('conversion-result', 'children'),
     Output('exchange-graph', 'figure')],
    [Input('base-currency', 'value'),
     Input('target-currency', 'value')]
)
def update_dashboard(base_currency, target_currency):
    # Get latest conversion rate
    rate = latest_rates.loc[latest_rates['symbol'] == target_currency, 'exchange_rate'].values[0]
    conversion_text = f"1 {base_currency} = {rate:.2f} {target_currency}"

    # Filter historical data for graph
    filtered_data = historical_rates[historical_rates['currency'] == target_currency]
    fig = px.line(filtered_data, x='date', y='rate',
                  title=f"{base_currency} to {target_currency} Exchange Rate Over Time",
                  labels={'rate': 'Exchange Rate', 'date': 'Date'})

    return conversion_text, fig

# Run the App
if __name__ == '__main__':
    app.run_server(debug=True)
